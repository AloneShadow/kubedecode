#!/usr/bin/python3

import subprocess
import yaml
import sys
import base64

def __autocompletion():
    print(
    """__kubedecode_namespace()
    {
        local cur prev ns
        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        prev="${COMP_WORDS[COMP_CWORD-1]}"
        ns=`kubectl get namespaces --no-headers | cut -d" " -f1`

        if [[ "${#COMP_WORDS[@]}" == "3" ]] ; then
            secrets=`kubectl get secrets -n ${prev} --no-headers | grep -Ev 'sh.helm|default-token' | cut -d' ' -f1`
            COMPREPLY+=( $(compgen -W "${secrets}" ${cur}) )
            return 0
        fi

        if [[ "${#COMP_WORDS[@]}" > "3" ]] ; then
            return 0
        fi

        COMPREPLY=( $(compgen -W "${ns}" ${cur}) )
     }
complete -F __kubedecode_namespace kubedecode""")

def get_secret_sections(kube_namespace):
    """ Get all secrets inside the given namespace """
    kube_secrets = subprocess.check_output("kubectl get secret -n "+kube_namespace+" -o yaml", shell=True)
    if yaml.__version__ > '3.13':
        kube_secrets_data = yaml.load(kube_secrets, Loader=yaml.FullLoader)["items"]
    else:
        kube_secrets_data = yaml.load(kube_secrets)["items"]
    for i in range(0,len(kube_secrets_data)):
        if 'sh.helm.release' in kube_secrets_data[i]["metadata"]["name"]:
            continue
        print ("Secrets Names in \x1b[1;32;40m"+kube_namespace+"\x1b[0m namespace:", kube_secrets_data[i]["metadata"]["name"])

def get_secrets(kube_namespace, kube_secret_name):
    """ Decode the given secret """
    kube_secrets = subprocess.check_output("kubectl get secret -n "+kube_namespace+" -o yaml "+kube_secret_name, shell=True)
    if yaml.__version__ > '3.13':
        kube_secrets_data = yaml.load(kube_secrets, Loader=yaml.FullLoader)["data"]
    else:
        kube_secrets_data = yaml.load(kube_secrets)["data"]
    for k,v in kube_secrets_data.items():
        decoded_v = base64.b64decode(v)
        try:
            print ('\x1b[1;32;40m'+k,":\x1b[0m", decoded_v.decode())
        except:
            print ('\x1b[1;31;40mBinary secret: '+k,":\x1b[0m", v)


kube_current_context = subprocess.check_output("kubectl config current-context", shell=True)
if len(sys.argv) == 2:
    if sys.argv[1] == 'completion':
        __autocompletion()
        exit(0)
    else:
        print ("\x1b[6;30;42mCurrent kube context is:", kube_current_context.strip().decode(), '\x1b[0m')
        get_secret_sections(sys.argv[1])
elif len(sys.argv) == 3:
    print ("\x1b[6;30;42mCurrent kube context is:", kube_current_context.strip().decode(), '\x1b[0m')
    get_secrets(sys.argv[1], sys.argv[2])
else:
    print ("Namespace required. Example: kubedecode <namespace> [<secret_name>]")
    exit(0)
